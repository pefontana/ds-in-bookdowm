[["index.html", "Data Science in Julia for Hackers Introduction 0.1 Open source 0.2 Prologue 0.3 Table of contents", " Data Science in Julia for Hackers Lambdaclass 2021-04-21 Introduction 0.1 Open source This book is currently in a beta version. We are looking forward to getting feedback and criticism: * Submit a GitHub issue here * Mail us to martina.cantaro@lambdaclass.com Thank you! There are 2 ways in which you can read this book: 1. In our web page https://datasciencejuliahackers.com/ 1. If you prefer a dynamic version of the book, you can download the repo in GitHub and run the .jl files in a Pluto notebook The pdf version of the book will be available in a few weeks Bayes hacking 0.2 Prologue This book is written by Federico Carrone, Herman Obst Demaestri and Mariano Nicolini. Thanks to Martina Cantaro, Camilo Plata, Manuel Puebla, Lucas Raúl Fernandez Piana, Osvaldo Martin, Iñaki Garay and Mariana Vinyolas. We have a habit in writing articles published in scientific journals to make the work as finished as possible, to cover up all the tracks, to not worry about the blind alleys or describe how you had the wrong idea first, and so on - Richard Feynman Only that what’s open can be true. Full transparency is best for me and you - OpenBSD One of the first things to note about this book is that it is not an academic textbook. The authors of this book are not academics but a multidisciplinary team of passionate, amateur practitioners from different backgrounds, namely Engineering, Computer Science, Physics and Economy, that found a common ground to write this book, and that day by day keep reading, learning and applying new approaches, technologies and ways of thinking. This book lies somewhere in between a methodological recipe and a theoretical intensive textbook. What we want to deliver is a mathematical and computational methodology to face concrete Data Science problems, that is, applying theory and science to real-world problems involving data. The relationship between theory and practice is complex. Considering them as a whole can take us much farther. These pages may offer the theorist a way to think about problematic situations in a more down to earth manner, and to the practitioner, stimulation to go beyond the mere application of programming libraries and tools. As the name of the book states, this is a book for Hackers. The term can have opposite connotations, depending on who is pronouncing it and to whom it refers to. In media and pop culture, it is associated with cyber-criminals, people that use computers and technology with malicious intent. In the cyber-security domain, hackers are, as stated in the final chapter of Hacking: The Art of Exploitation by Jon Erickson, “…just people with innovative spirits and an in-depth knowledge of technology.” But the definition we like the most is borrowed from The Jargon File’s glossary, written by Eric S. Raymond, &gt; “A person who delights in having an intimate understanding of the internal workings of a system, computers and computer networks in particular.” It is in this sense that this book is meant for hackers: it will lead you down a road with a results-driven perspective, slowly growing intuition about the inner workings of many problems involving data and what they all have in common, with an emphasis on application. The name of the book is also inspired by the great Bayesian Methods for Hackers, which had a big influence on the topics and the approach of this book. The situations presented in the book are diverse, reflecting the broad spectrum of application of Data Science. The solutions, however, don’t try to be beautiful or perfect. We know the path to resolving real-life problems is muddy, that sometimes you might feel lost and that your ideas may change as you try to find the solution, but we encourage to embrace these coarse features and accept the sharp corners in this learning-through-solving journey. Suggestions, criticism and feedback are very appreciated, this book is alive and will evolve as a consequence of its environment’s response. Although this book isn’t intended to have obscure, overly technical or academic definitions that may put the reader off, people with a little programming knowledge, a basic understanding of Calculus and some modelling intuition will get the most out of these pages. Familiarity with a high-level language like Python, taking derivatives and some function analysis should be enough for the reader to follow through with the book. All chapters include the code for the reader to play, explore and implement the solutions on their own. Moreover, links to notebooks with the worked solutions are available. Why Data Science in Julia? There are several reasons why Julia is great language for Data Science. Julia code is readable, specially in regards to math-related computations. Julia is designed for math from the ground up, and considering the great amounts of math involved in Data Science, this makes it a very convenient programming language to work with. Another interesting aspect of Julia is its syncretism. This is due to its historical background: it was developed by a team of scientists who wanted a tool to address problems they typically encountered while doing research. Often, scientists are faced with complicated situations that need to integrate various tools and find an equilibrium point among many requirements, like learning to program in a new language and to efficiently use the equipment and hardware available. Julia is the perfect tool for these needs, suited for implementing high-level solutions than can be tested easily and quickly in an interactive manner, and allowing to write highly performant code in a simple way when needed, all in the same language. Moreover, features like multiple-dispatch and simple syntax, allow for great composability between packages as well as scalability, making the task of writing software much more user friendly and maintainable. 0.3 Table of contents 0.3.1 Part I: Data Science and Julia First chapter: Science, technology, models and epistemology. Second chapter: Introduction to the Julia programming language, showing examples of code and some first steps. 0.3.2 Part II: Bayesian Statistics Third chapter: An introduction to probability, probability distributions and Bayes’ interpretation. Fourth chapter: Using a Naive-Bayes approach we construct a simple spam email filter. Fifth chapter: An introduction to Probabilistic Programming and some simple examples using the Turing.jl package. Sixth chapter: We estimate the gravity of Mars to compute the escape velocity, throwing stones and taking very simple measurements from it. Seventh chapter: We use a hierarchical bayesian model to estimate latent variables that describe Premier League´s football teams. Eighth chapter: We analyze how the scoring probability is affected by some variables, such as the distance from the hoop and the angle of shooting. Ninth chapter: We solve a problem of optimal pricing optimization using a bayesian point of view. 0.3.3 Part III: Machine Learning Work in progress 0.3.4 Part IV: Deep Learning Tenth chapter: Overview of Machine Learning and implementation of a simple convolutional neural network that is able to discriminate between pictures of bees and wasps. 0.3.5 Part V: Scientific Machine Learning Eleventh chapter: We explain the Ultima Online Catastrophe using differential equations to build a population dynamics model. Twelfth chapter: A continuation of the Ultima Online Catastrophe, introducing the Universal Differential Equations to recover missing parts of scientific models. 0.3.6 Part VI: Time Series and Forecasting Thirteenth chapter: We lay the foundations for time series analysis, focusing on the exponential smoothing method. "],["science-technology-and-epistemology.html", "Chapter 1 Science technology and epistemology 1.1 The difference between Science and Technology 1.2 What is technology? 1.3 References", " Chapter 1 Science technology and epistemology 1.1 The difference between Science and Technology Anyone would agree that science and technology have a lot in common, but what are the essential differences between them? And how do they interact with each other? These are fundamental questions for us, and ones that most people don’t have a clear answer for. This leads to misconceptions about key aspects on, for example, how knowledge is created and, more generally, how the world operates. One fundamental difference between the two is that while science tries to understand the physical world in which we live, technology aims to transform it. So, technology has a strong practical goal and science a more intellectual one. A very frequent misunderstanding that is nowadays very much encouraged by academia is to think that first, one needs to acquire all of the theoretical and formal knowledge about a subject matter before being able to apply it and transform reality. But in reality this is not the case. The process occurs, in most cases, in the opposite way: one lives in reality, interacts with it, takes action, makes mistakes, tries again, and in that way slowly discovers how the world works. And then, of course, it is useful to formalize our knowledge in order to be able to transmit that learning, lay solid foundations and to continue advancing in our understanding. 1.2 What is technology? Technology is the practice that allows us humans to transform reality. We have been doing it since the very beginning of the human era, and it is really what makes us different from other animals. Technology enables us to expand our capabilities. From taking a long, pointy stick to reach fruit high up in a tree, to transforming an entire landscape by building a huge electric dam, to the creation of artificial intelligence that helps us solve our deepest puzzles. With technology we transform our experience in the world. It is evident that the more we know about the reality in which we live, the more we will be able to modify it. But from this idea comes a very important question: what is the order in which innovation takes place? Is it necessary first to have an absolute understanding of the process we are trying to modify? Or is technology created in a more chaotic process, through trial and error? Does a child need to know the gear mechanisms of a bicycle to learn to ride it? Does Lionel Messi need to know about fluid dynamics to make the ball take a curved trajectory? Did the Romans need to know the Navier-Stokes equation in order to build their huge aqueducts? Knowledge is often acquired through experimentation, implementation and heuristics, in a process that involves more trial and error and less theoretical knowledge than many believe. And technological innovation tends to follows the same mechanism. Many breakthroughs were made by people who were taking risks, exploring, and stumbling in the dark with a destination in mind but no clear directions to get there, with theories only taking their definitive form once they arrived to a solution and were able to look back on what they had discovered. The current understanding of how knowledge is produced does not reflect how it actually happens in many cases. Having a better understanding of this process can help us do it better. Many people think of the innovation process as a more or less linear path that begins with theoretical discoveries, and only after formalization is achieved, practical uses are invented. This type of thinking is counterproductive because, being so widespread, it causes many people to be more concerned with constantly acquiring theoretical knowledge, rather than taking action and immersing themselves in practice. Fear of failure, of not getting it exactly right on the first try, also plays a role, perhaps encouraged by the way we tell stories about innovation. By looking at the history of technology and innovation, and who writes it, we see that the people who made the discoveries are rarely the ones who write the books about them. As Nassim Nicholas Taleb said in “The History Written by the Losers,” the people that are doing stuff don’t have time for writing. And perhaps because the non-practitioners are the ones who write about the findings of others, as time goes by, society ends up being convinced that there was indeed an arduous intellectual and academic work first, and then came its implementation. That –apparently– common sense in which knowledge is built from a purely intellectual work that can be done in the armchair at home, and that only after acquiring this sacred theoretical knowledge it is possible to come up with technology or innovation, is the one we need to question. This confusion in the order in which technological advances occur is seen constantly and in the most varied areas of the history of innovation. Take, for example, the development of the jet engine. It really had nothing to do with the discoveries of physicists researching, but with the cleverness and practical heuristics based on trial and error that engineers had developed, although in academic books it is stated the other way around. Or in a really practical field, finances. For years, senior traders that have been deploying several heuristics to make their trades, build portfolios that are much more complex and better performing than the ones generated by the pricing formulas that academics came up with and often didn’t stand the test of time. And this happened because, in the process of trying to generalize these heuristics into formal equations, the academics are constantly introducing fragility. That is, in the process of finding the laws that rule those dynamic systems, lot of cases are ignored, something that doesn’t happen to experienced traders. What cements the gap between theory and practice, is that finance PhDs then fail to understand how traders can correctly assign prices to financial derivatives without being familiar with a corpus of theorems that, to them, are indispensable to understand market dynamics. In this book we will try to take you, the reader, through a journey that is more similar to the real way in which knowledge is built: an iterative, hands-on process of problem-solving that gradually builds intuitions about how things work and why, that we can later formalize. 1.3 References Antifragile: Things That Gain from Disorder, ch 15 - Nassim Nicholas Taleb Infinite Powers: How Calculus Reveals the Secrets of the Universe - Steven Strogatz Lost in Math: How Beauty Leads Physics Astray - Sabine Hossenfelder The Joy of X Kolmogorov - Mathematics: It’s contents, method and meaning Freeman Dyson - Where Do the Laws of Nature Come From? Roger Penrose - Is Mathematics Invented or Discovered? How to tell science from pseudoscience Sabine Hossenfelder - Why the ‘Unreasonable Effectiveness’ of Mathematics? http://www.paulgraham.com/hp.html https://en.wikipedia.org/wiki/Apophatic_theology https://en.wikipedia.org/wiki/Falsifiability https://norvig.com/fact-check.html https://www.wired.com/2008/06/pb-theory/ https://fs.blog/2016/01/karl-popper-on-science-pseudoscience/ "],["meeting-julia.html", "Chapter 2 Meeting Julia", " Chapter 2 Meeting Julia "],["probability-introduction.html", "Chapter 3 Probability introduction", " Chapter 3 Probability introduction "],["spam-filter.html", "Chapter 4 Spam filter", " Chapter 4 Spam filter "],["probabilistic-programming.html", "Chapter 5 Probabilistic programming", " Chapter 5 Probabilistic programming "],["escaping-from-mars.html", "Chapter 6 Escaping from Mars", " Chapter 6 Escaping from Mars "],["football-simulation.html", "Chapter 7 Football simulation", " Chapter 7 Football simulation "],["basketball-shots.html", "Chapter 8 Basketball shots", " Chapter 8 Basketball shots "],["optimal-pricing.html", "Chapter 9 Optimal pricing", " Chapter 9 Optimal pricing "],["image-classification.html", "Chapter 10 Image classification", " Chapter 10 Image classification "],["ultima-online.html", "Chapter 11 Ultima online", " Chapter 11 Ultima online "],["ultima-continued.html", "Chapter 12 Ultima continued", " Chapter 12 Ultima continued "],["time-series.html", "Chapter 13 Time series", " Chapter 13 Time series "],["epilogue.html", "Epilogue", " Epilogue "]]
